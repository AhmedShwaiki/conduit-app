{"ast":null,"code":"var _jsxFileName = \"/home/dev/conduit-app/my-app/src/components/hookExample.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StateHookExample = props => {\n  _s();\n\n  //add hooks here! considering rules of hooks.\n  //[state, setState()] = useState(); <= Built in Hook that -\n  //-intiallizes a state variable to a sfc\n  //- returns the current state (this.state) and setState() this.setState\n  const [count, setCount] = useState(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You clicked from StateHookExample \", count, \" times\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount(count + 1),\n      children: \"Click me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StateHookExample, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n\n_c = StateHookExample;\nexport default StateHookExample;\n\nvar _c;\n\n$RefreshReg$(_c, \"StateHookExample\");","map":{"version":3,"sources":["/home/dev/conduit-app/my-app/src/components/hookExample.jsx"],"names":["useState","StateHookExample","props","count","setCount"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAAA;;AAClC;AACA;AACA;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,CAAD,CAAlC;AACA,sBACE;AAAA,4BACE;AAAA,uDAAsCG,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAE,MAAMC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAZD;;GAAMF,gB;;KAAAA,gB;AAcN,eAAeA,gBAAf","sourcesContent":["import { useState } from \"react\";\n\nconst StateHookExample = (props) => {\n  //add hooks here! considering rules of hooks.\n  //[state, setState()] = useState(); <= Built in Hook that -\n  //-intiallizes a state variable to a sfc\n  //- returns the current state (this.state) and setState() this.setState\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>You clicked from StateHookExample {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  );\n};\n\nexport default StateHookExample;\n"]},"metadata":{},"sourceType":"module"}